# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RunwaysClassifier
                                 A QGIS plugin
 This plugin classifying runways types based on their patterns 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-25
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jenya Brodski
        email                : jekab596@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QTimer, QSize
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QAction, QFileDialog, QHeaderView, QMessageBox
from qgis._core import QgsMapLayer, QgsProject
from qgis.utils import *

# Initialize Qt resources from file resources.py


# Import the code for the dialog
from .views.runways_classifier_dialog import RunwaysClassifierDialog
from .views.runways_number_selection_dialog import RunwaysNumberSelectionDialog
from .views.view_classification_dialog import RunwaysViewDialog
from .utils.image_processing.runways_detector import RunwaysDetector
from .database.mongodb import dbConnect,insertRecords,findRecords
from .utils.image_processing.iterator import ImageIterator
#from .utils.image_processing.runways_data_extructor import RunwaysDataExtractor
from .utils.image_processing.data_generator import DataGenerator
import numpy as np
import cv2
import json


class RunwaysClassifier:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RunwaysClassifier_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialogs (after translation) and keep reference
        self.classifier_dlg = RunwaysClassifierDialog()
        self.selection_dlg = RunwaysNumberSelectionDialog()
        self.view_dlg = RunwaysViewDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Runways Classifier')
        self.layer_name = ""        # name of airpport layer
        self.initialSize = None     # initial size of the map canvas
        self.imgSize = None         # hold the image size (600x600)
        self.myLayer = None         # the layer of airport points
        self.pointsCount = 0        # counter of airports that their image saving
        self.scale = 67000          # zoom scale to the map
        self.imgPath = os.path.join(os.path.dirname(__file__),"imgs\qimg_") # base path of each image
        self.bool = True
        self.rd = None              # short name for runways detector *(has to be changed) 
        self.airportsData = []      # data about each airport after analyzing the image
        self.dataBuffer = None      # buffer that contain  tif, tfw, icao and airport name for each airport that is going to be sent to image processer
        self.records = None         # records that grabbed from data base 
        self.records_num = 0        # number of grabbed records
        self.i = None               #
        self.runways_num = None     # airports with number of runways that will be present at the view dialog (spin box number)
        self.airport_num = None     # number of airports their images going to be saved (spin box number)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        #self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RunwaysClassifier', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        icon_path = os.path.join(os.path.dirname(__file__),"runways.png")
        self.add_action(
            icon_path,
            text=self.tr(u'Runways classifier'),
            callback=self.runClassifier,
            add_to_toolbar=False,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path,
            text=self.tr(u'Runways selection'),
            callback=self.runSelection,
            add_to_toolbar=True,
            parent=self.iface.mainWindow())

        self.view_dlg.btn_next.clicked.connect(self.getNext)
        self.view_dlg.btn_prev.clicked.connect(self.getPrev)
        self.view_dlg.btn_download.clicked.connect(self.download)
        self.view_dlg.tbn_download.clicked.connect(self.seveDowloadDirectory)
        self.classifier_dlg.tb_inVect.clicked.connect(self.openVector)
        self.classifier_dlg.tb_outF.clicked.connect(self.saveDirectory)
        self.loadVectors()

        # will be set False in run()
        #self.first_start = True

    def loadVectors(self):
        """ load vector layer of airport points"""
        self.classifier_dlg.cb_inVect.clear()
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        vector_layers = []
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vector_layers.append(layer.name())
                self.layer_name = layer.name()
        self.classifier_dlg.cb_inVect.addItems(vector_layers)

    def openVector(self):
        """ open vector from file dialog """
        inFile = str(QFileDialog.getOpenFileName(caption="open shapefile", filter="shapefiles (*.shp)")[0])
        if inFile is not None and inFile != "":
            self.iface.addVectorLayer(inFile, str.split(os.path.basename(inFile), ".")[0], "ogr")
            self.loadVectors()

    def saveDirectory(self):
        """ Get the save file name for the airport runways analysis """
        outFile = str(QFileDialog.getSaveFileName(caption="save as..",filter="")[0])
        self.setOutputLine(outFile)

    def setOutputLine(self,text):
        """Set the GUI text for the output file"""
        self.classifier_dlg.le_outF.setText(text)
        self.exportPath = self.classifier_dlg.le_outF.text()

    def seveDowloadDirectory(self):
        """ Get the save file name for download analysis """
        outFile = str(QFileDialog.getSaveFileName(caption="save as..", filter="")[0])
        self.setDownloadOutputLine(outFile)

    def setDownloadOutputLine(self,text):
        """Set the GUI text for the output download file"""
        self.view_dlg.le_download.setText(text)
        self.exportPath = self.view_dlg.le_download.text()

    def download(self):
        """
        Download images and json file of specified classification
        of runways to directory that has been set
        :return:
        """
        if self.exportPath is not "":
            try:
                data = {}
                workDir = self.initDir(self.exportPath)
                path = workDir + '/'
                for i in range(0, self.records_num):
                    d = {}
                    d.update({"name": self.records[i]['name']})
                    d.update({"icao": self.records[i]['icao']})
                    d.update({"runways_num": self.records[i]['runways_num']})
                    d.update({"data": self.records[i]['data']})
                    d.update({"loc": self.records[i]['loc']})
                    d.update({"model": self.records[i]['model']})
                    data.update({str(i):d})
                    file_name = self.records[i]['name']
                    img = self.list2img(i)
                    cv2.imwrite(path + file_name +'.tif', img)
                with open(path + 'AirportsData.json','w') as fp:
                    json.dump(data,fp,indent=4)
                self.view_dlg.le_download.setText("")
            except:
                return

    def getRunwaysNum(self):
        """Get runway number from spin box"""
        self.runways_num = self.selection_dlg.sb_runways_num.value()


    def getAirportNum(self):
        """Get number of airport to process from spin box"""
        self.airport_num = self.classifier_dlg.sb_rn_to_process.value()
        print(self.airport_num)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Runways Classifier'),
                action)
            self.iface.removeToolBarIcon(action)

    def setLayerToVisible(self):
        """Set layer to be visible on map canvas"""

        # defining current project instance
        currentProject = QgsProject.instance()

        if((currentProject.layerTreeRoot().findLayer(self.myLayer.id()).isVisible())):
            return False

        # swap to visible
        currentProject.layerTreeRoot().findLayer(self.myLayer.id()).setItemVisibilityChecked(True)
        return True


    def setLayerToInvisible(self):
        """Set layer to be invisible on map canvas"""

        # defining current project instance
        currentProject = QgsProject.instance()

        if(currentProject.layerTreeRoot().findLayer(self.myLayer.id()).isVisible()):
            # swap to invisible
            currentProject.layerTreeRoot().findLayer(self.myLayer.id()).setItemVisibilityChecked(False)
            return True
        return False

    def prepareMap(self):
        """locate the map in the next point location"""
        print("in pre map")

        # swap visibility of airports layer to true
        self.setLayerToVisible()

        # selecting a point on map by count
        self.myLayer.select(self.pointsCount)

        # set trigger to zoom automaticaly on selected points
        self.iface.actionZoomToSelected().trigger()

        # deselect a point on map by count
        self.myLayer.deselect(self.pointsCount)

        # zoom to map canvas with defined scale
        self.iface.mapCanvas().zoomScale(self.scale)

        # swap visibility of airports layer to false
        self.setLayerToInvisible()

        # wait for a second and run the exportMap function
        QTimer.singleShot(2000, self.exportMap)  # Wait a second and export the map


    def exportMap(self):
        """Export images to specified directory"""
        print("in ex map")

        # saving the raster image in the working diractory
        self.iface.mapCanvas().saveAsImage(self.imgPath +  str(self.pointsCount) + ".tif", None, "Tif")

        # create data set for each airport: icao code and airport name
        feat = self.myLayer.getFeature(self.pointsCount)
        airport = [feat[3] ,feat[5]]

        # append data set of airport to the buffer
        self.dataBuffer.append(airport)

        # check if we looped through all the points in the layer
        if self.pointsCount >= self.airport_num - 1:  

            # resize the map canvas window back to intial size
            self.resize()
            self.generateData()

            db = dbConnect()
            insertRecords(db,self.airportsData)

            return
        self.pointsCount += 1

        # wait for a second and run the prepareMap function
        QTimer.singleShot(1000, self.prepareMap)



    def generateData(self):
        """
        Loop through runways images, analyse them
        and append into a list
        :return:
        """

        path = lambda x,y: x + y
        data = []
        print()
        iter = ImageIterator(self.dataBuffer)
        for ids in iter:
            data.append(DataGenerator.generateData(path(self.imgPath,str(iter.getIndex())),ids[0],ids[1]))

        self.airportsData = data


    def prepareViewDialog(self):
        """Prepare view dialog"""
        self.prepareLabels()
        self.prepareTable()
        self.prepareImg(self.i)

    def prepareTable(self):
        """Prepare table with data about runway in the view dialog UI"""
        data = self.records[self.i]['data']
        table_model = QStandardItemModel()
        table_model.setHorizontalHeaderLabels(['Degrees', 'Length', 'Runway coordinates'])
        if data is not None:
            for row in data:
                degree = QStandardItem('('+str(row[1][0])+','+str(row[1][1])+')')
                length = QStandardItem(str(row[2])+' meters')
                runway_coords = QStandardItem('('+str(row[0][0])+' ,'+str(row[0][1])+' ,'+str(row[0][2])+' ,'+str(row[0][3])+')')
                table_model.appendRow([degree,length,runway_coords])
            self.view_dlg.table.setModel(table_model)
            self.view_dlg.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
            self.view_dlg.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
            self.view_dlg.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
            self.view_dlg.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
            return
        self.view_dlg.table.setModel(table_model)
        self.view_dlg.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.view_dlg.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeToContents)
        self.view_dlg.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.view_dlg.table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)

    def prepareLabels(self):
        """Prepare the data about airport in view dialog UI"""
        self.view_dlg.lb_a_name.setText(self.records[self.i]['name'])
        self.view_dlg.lb_code.setText(self.records[self.i]['icao'])
        self.view_dlg.lb_a_coords.setText('EPSG:3857 ( '+str(self.records[self.i]['loc'][0])+' , '+str(self.records[self.i]['loc'][1])+' )' )
        self.view_dlg.lb_model.setText(self.records[self.i]['model'])

    def list2img(self,i):
        """
        Convert list of image pixel values into numpy array

        :param i: Number of the image in records list
        :return: Image from records list
        :rtype: numpy array
        """
        img = np.array(self.records[i]['image']).astype(np.uint8)
        return img

    def prepareImg(self,i):
        """
        Extract image from records list and set it in to
        the label in the view UI

        :param i: Number of the image in records list
        :return:
        """

        img = self.list2img(i)
        height, width, channel = [600,600,3]
        bytesPerLine = 3 * width
        qImg = QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888).rgbSwapped()
        self.view_dlg.lb_img.setPixmap(QPixmap(qImg))

    def getNext(self):
        """
        Update the view dialogs UI to show next
        airport runways data

        :return:
        """

        try:
            if self.i < self.records_num-1:
                self.i = self.i +1
                self.prepareViewDialog()
                return
        except:
            return

    def getPrev(self):
        """
        Update the view dialogs UI to show previous
        airport runways data

        :return:
        """
        try:
            if self.i > 0:
                self.i = self.i -1
                self.prepareViewDialog()
                return
        except:
            return

    def resize(self):
        """
        resize the map canvas to the initial size

        :return:
        """
        # resize map window to normal size
        self.iface.mapCanvas().resize(self.initialSize)

    def runInfo(self):
        """
        Run masssge box that says that there no
        airport with runways that we ask for

        :return:
        """
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText('No airports with '+str(self.runways_num)+' runways!')
        msg.setWindowTitle("Information")
        msg.exec_()


    def runClassifier(self):
        """
        Run method that performs image rendering
        and classification of runways if exist
        """

        # show the dialog
        self.classifier_dlg.show()

        self.classifier_dlg.sb_rn_to_process.setValue(0)

        # Run the dialog event loop
        result = self.classifier_dlg.exec_()

        # See if OK was pressed
        if result:
            self.getAirportNum()
            if self.airport_num == 0:
                return
            self.dataBuffer = []
            self.pointsCount = 0
            self.initialSize = self.iface.mapCanvas().size()
            self.imgSize = self.iface.mapCanvas().resize(QSize(602, 602))
            self.myLayer = QgsProject.instance().mapLayersByName(self.layer_name)[0]
            self.iface.setActiveLayer(self.myLayer)
            self.prepareMap()


    def runViewClassification(self):
        """
        Show a dialog with airport with number of runways that
        the user ask for

        :return:
        """

        print("in view")
        self.records_num = len(self.records)
        if self.records_num == 0:
            self.runInfo()
            return

        # Prepare the UI
        self.prepareViewDialog()

        # show the dialog
        self.view_dlg.show()

        # Run the dialog event loop
        result = self.view_dlg.exec_()
        if result:
            pass


    def runSelection(self):
        """
        Method that show dialog for selection airports with
        which runways to show and call to runViewClassification
        method to show them if they are exist in the database,
        otherwise pop up dialog that tale that no airport to show

        :return:
        """

        self.selection_dlg.sb_runways_num.setValue(0)

        # show the dialog
        self.selection_dlg.show()

        # Run the dialog event loop
        result = self.selection_dlg.exec_()
        if result:
            self.i = 0
            self.getRunwaysNum()
            db = dbConnect()
            self.records = findRecords(db,self.runways_num)
            self.records = list(self.records)
            self.records_num = len(self.records)
            if self.records_num == 0:
                self.runInfo()
                return
            self.runViewClassification()




